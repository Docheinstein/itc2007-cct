# ============ SOLVER =============

# Comma separated list of methods among 'ls', 'hc', 'ts', 'sa'.
# Default: hc,sa
solver.methods=hc,sa

# Solve for no more than N seconds.
# Default: 60
solver.max_time=60

# Solve for no more than N cycles.
# Default: -1
solver.max_cycles=-1

# Whether generate a new initial solution each cycle.
# Default: false
solver.multistart=false

# Restore the best solution so far after N non improving cycles.
# (does nothing if multistart is true).
# Default: 15
solver.restore_best_after_cycles=15

# ============ FINDER =============

# Randomness of the initial feasible solution.
# (0 produces always the same deterministic solution,
# higher value produces "more random" solutions,
# but makes it harder to find feasible ones).
# Default: 0.33
finder.ranking_randomness=0.33

# ========== LOCAL SEARCH ==========

# Whether perform immediately a move with delta < 0,
# without evaluating all the neighbourhood for the best one.
# Default: true
ls.greedy=true

# ========= HILL CLIMBING =========

# Maximum non-improving iterations number.
# Default: 120000
hc.max_idle=120000

# ========= TABU SEARCH ===========

# Maximum non-improving iterations number.
# Default: 400
ts.max_idle=400

# Tabu tenure (number of iterations a move remain banned).
# Default: 120
ts.tabu_tenure=120

# Coefficient of penalty for frequently banned moves.
# tt(m) = tt + ts.frequency_penalty_coeff^freq(m)
# Default: 1.2
ts.frequency_penalty_coeff=1.2

# Whether pick a random move among the best ones of the neighbourhood.
# 'false' picks always the move seen first among the best ones.
# Default: true
ts.random_pick=true

# Whether perform immediately a move with delta < 0,
# without evaluating all the neighbourhood for the best one.
# Default: true
ts.greedy=true

# Whether clear the tabu list when a new global best is found.
# Default: true
ts.clear_on_best=true

# ====== SIMULATED ANNEALING ======

# Maximum non-improving iterations number.
# Default: 80000
sa.max_idle=80000

# Initial temperature.
# Default: 1.5
sa.initial_temperature=1.5

# Temperature's cooling rate.
# Default: 0.95
sa.cooling_rate=0.95

# Minimum temperature to reach before leave the method.
# Default: 0.08
sa.min_temperature=0.08

# Coefficient for the number of iterations to do
# using the same temperature.
# len = sa.temperature_length_coeff * n_lectures
# Default: 1
sa.temperature_length_coeff=1
