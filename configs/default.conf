# ============ SOLVER =============

# Comma separated list of methods among 'ls', 'hc', 'ts', 'sa'.
# Default: hc,sa
solver.methods=hc,sa

# Solve for no more than N seconds.
# Default: 60
solver.max_time=60

# Solve for no more than N cycles.
# Default: -1
solver.max_cycles=-1

# Whether generate a new initial solution each cycle.
# Default: false
solver.multistart=false

# Restore the best solution so far after N non improving cycles.
# (does nothing if multistart is true).
# Default: 20
solver.restore_best_after_cycles=20

# ============ FINDER =============

# Randomness of the initial feasible solution.
# (0 produces always the same deterministic solution,
# higher value produces "more random" solutions,
# but makes it harder to find feasible ones).
# Default: 0.33
finder.ranking_randomness=0.33

# ========== LOCAL SEARCH ==========


# ========= HILL CLIMBING =========

# Maximum non-improving iterations number.
# Default: 120000
hc.max_idle=120000

# Increase hc.max_idle to hc.max_idle * by hc.max_idle_near_best_coeff
# if near the best (intensification); the meaning of "near" can be
# customized with hc.near_best_ratio.
hc.max_idle_near_best_coeff=3

# Define the meaning of "near the best".
hc.near_best_ratio=1.02

# ========= TABU SEARCH ===========

# Maximum non-improving iterations number.
# Default: -1
ts.max_idle=-1

# Tabu tenure (number of iterations a move remain banned).
# Default: 80
ts.tabu_tenure=80

# Coefficient of penalty for frequently banned moves.
# tt(m) = tt + ts.frequency_penalty_coeff * freq(m)
# Default: 0
ts.frequency_penalty_coeff=0

# Increase ts.max_idle to ts.max_idle * by ts.max_idle_near_best_coeff
# if near the best (intensification); the meaning of "near" can be
# customized with hc.near_best_ratio.
ts.max_idle_near_best_coeff=1.5

# Define the meaning of "near the best".
ts.near_best_ratio=1.02

# ====== SIMULATED ANNEALING ======

# Initial temperature.
# Default: 1.5
sa.initial_temperature=1.5

# Temperature's cooling rate.
# Default: 0.995
sa.cooling_rate=0.995

# Minimum temperature to reach before leave the method.
# Default: 0.10
sa.min_temperature=0.10

# Coefficient for the number of iterations to do
# using the same temperature.
# temperature_length = sa.temperature_length_coeff * n_lectures
# Default: 1
sa.temperature_length_coeff=1