# ============ SOLVER =============

# Comma separated list of methods among 'ls', 'hc', 'ts', 'sa', 'dls'
# Default: sa,ls
solver.methods=sa,ls

# Solve for no more than N seconds.
# Default: 60   // -1 if in race mode (-r)
solver.max_time=60

# Solve for no more than N cycles.
# Default: -1
solver.max_cycles=-1

# Whether generate a new initial solution each cycle.
# Default: false
solver.multistart=false

# Restore the best solution so far after N non improving cycles.
# (does nothing if multistart is true).
# Default: 50
solver.restore_best_after_cycles=50

# ============ FINDER =============

# Randomness of the initial feasible solution.
# (0 produces always the same deterministic solution,
# an higher value produces "more random" solutions,
# but makes it harder to find feasible ones).
# Default: 0.33
finder.ranking_randomness=0.33

# ====== SIMULATED ANNEALING ======

# Initial temperature.
# Default: 1.4
sa.initial_temperature=1.4

# Temperature's cooling rate.
# Default: 0.965
sa.cooling_rate=0.965

# Minimum temperature to reach before leave the method.
# Default: 0.12
sa.min_temperature=0.12

# Decrease the minimum temperature to reach to
# sa.min_temperature * sa.min_temperature_near_best_coeff if near
# the best; the meaning of "near" can be customized with sa.near_best_ratio.
# Default: 0.68
sa.min_temperature_near_best_coeff=0.68

# Consider a solution "near best" if the current solution has cost
# equal or less sa.near_best_ratio times the best solution cost.
# Default: 1.05
sa.near_best_ratio=1.05

# Coefficient for the number of iterations with the same temperature.
# temperature_length = sa.temperature_length_coeff * n_lectures * n_rooms * n_days * n_slots
# Default: 0.125
sa.temperature_length_coeff=0.125

# ========== LOCAL SEARCH ==========

# Do nothing if the current solution has cost greater than
# ls.max_distance_from_best_ratio times the best solution cost.
# Default: -1   // 1.02 if in default SA+LS mode
ls.max_distance_from_best_ratio=-1

# ========= HILL CLIMBING =========

# Maximum non-improving iterations number.
# Default: 120000
hc.max_idle=120000

# Increase hc.max_idle to hc.max_idle * by hc.max_idle_near_best_coeff
# if near the best (intensification); the meaning of "near" can be
# customized with hc.near_best_ratio.
# Default: 3
hc.max_idle_near_best_coeff=3

# Consider a solution "near best" if the current solution has cost
# equal or less hc.near_best_ratio times the best solution cost.
# Default: 1.02
hc.near_best_ratio=1.02

# ========= TABU SEARCH ===========

# Maximum non-improving iterations number.
# Default: -1
ts.max_idle=-1

# Tabu tenure (number of iterations a move remain banned).
# Default: 120
ts.tabu_tenure=120

# Coefficient of penalty for frequently banned moves.
# tt(m) = tt + ts.frequency_penalty_coeff * freq(m)
# Default: 0
ts.frequency_penalty_coeff=0

# Increase ts.max_idle to ts.max_idle * by ts.max_idle_near_best_coeff
# if near the best (intensification); the meaning of "near" can be
# customized with hc.near_best_ratio.
# Default: 1.5
ts.max_idle_near_best_coeff=1.5

# Consider a solution "near best" if the current solution has cost
# equal or less ts.near_best_ratio times the best solution cost.
# Default: 1.02
ts.near_best_ratio=1.02

# ========== DEEP LOCAL SEARCH ==========

# Do nothing if the current solution has cost greater than
# dls.max_distance_from_best_ratio times the best solution cost.
# Default: -1
dls.max_distance_from_best_ratio=-1
